" BASIC SETUP:
" the <leader> is (comma)
" ***************************************************************************
" to be able to use VIM key combos not only in the shell but also in the Python interpreter
" and any other tool that uses GNU Readline, add the following line to ~/.inputrc
" set editing-mode vi
" ***************************************************************************
" filetype off
if &filetype ==# 'vue'
  set filetype=html
endif

set autoread                                                                " Set to auto read when a file is changed from the outside
set backspace=indent,eol,start                                              " more powerful backspacing
set clipboard=unnamed                                                       " access your system clipboard
set cmdheight=2                                                             " Height of the command bar
syntax enable                                                               " enable syntax highlighting and plugin (for netrw)
set encoding=utf8                                                           " Set utf8 as standard encoding and en_US as the standard language
set expandtab                                                               " convert tabs into spaces
set ffs=unix,dos,mac                                                        " Use Unix as the standard file type
set foldmethod=indent                                                       " Code folding
set foldlevel=99
set history=500                                                             " Sets how many lines of history VIM has to remember
set incsearch                                                               " incremental search
set laststatus=2                                                            " Always show the status line
set list                                                                    " Show trailing white space
set listchars=tab:>·,trail:~,extends:>,precedes:<,space:.                   " eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:.
set mouse=nicr
set magic                                                                   " For regular expressions turn magic on
set nocompatible                                                            " enter the current millenium
set number                                                                  " always show line numbers
set hidden
set ruler                                                                   " Always show current position
set scrolloff=3                                                             " when scrolling, keep cursor 3 lines away from screen border
set shiftwidth=2                                                            " amount of block indenting
set smarttab                                                                " uses the shiftwidth instead of tabstop to delete indented line
set synmaxcol=200                                                           " performance ???
set tabstop=2                                                               " press tab, 2 spaces forward, 1 tab == 2 spaces
set wrap                                                                    " Wrap lines

" PLUGINS
" ************************************************************************
" Install vim-plug if we don't already have it
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source ~/.vimrc
endif

call plug#begin('~/.vim/plugged')

" Brief help
" :PlugInstall    - installs plugins; to update :PlugUpdate
" :PlugClean      - confirms removal of unused plugins;

Plug 'elzr/vim-json'
Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
Plug 'airblade/vim-gitgutter'

" Icon files
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'ryanoasis/vim-devicons'
" Airline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

Plug 'neoclide/coc.nvim', {'branch': 'release'}                           " Intellisense engine
Plug 'scrooloose/nerdtree'                                                " Better file browser
Plug 'scrooloose/nerdcommenter'                                           " Code commenter
Plug 'ctrlpvim/ctrlp.vim'                                                 " Code and files fuzzy finder
Plug 'mattn/emmet-vim'                                                    " Zen coding, use emmet
Plug 'ap/vim-css-color'                                                   " Paint css colors with the real color
Plug 'pangloss/vim-javascript'                                            " Javascript indentation and syntax support
Plug 'w0rp/ale'                                                           " Check syntax in Vim asynchronously and fix files
Plug 'leafOfTree/vim-vue-plugin'                                          " syntax and indent plugin for vue files
"Plug 'ervandew/supertab'                                                  " vim insert mode completions with Tab
"Plug 'Yggdroot/indentLine'
Plug 'tpope/vim-fugitive'

" theme plugins
Plug 'nightsense/office'
Plug 'nightsense/cosmic_latte'
Plug 'Nequo/vim-allomancer'
Plug 'franbach/miramare'
Plug 'tomasr/molokai'


" All of your Plugins must be added before the following line
call plug#end()                                                           " required
filetype plugin indent on                                                 " required

" OTHER BASIC SETUP (TWEAKS)
" ***************************************************************************
let mapleader = ","
let maplocalleader = ","
set termguicolors
nnoremap <leader>N :setlocal number!<cr>            " Toggle line numbers

" 1 comma+s to save
" 2 comma+q to quit (does not save, watch out!)
" 3 quit all without saving
nnoremap <leader>ss :w<cr>
nnoremap <leader>q :q!<cr>
nnoremap <leader>qa :qa!<cr>

let $MYVIMRC="/home/bill/.vimrc-vue"
" Reload vimrc
nnoremap <leader>rv :source<Space>$MYVIMRC<cr>
" Edit vimrc
nnoremap <leader>ev :e $MYVIMRC<cr>

" Copy & paste to clipboard
noremap <Leader>Y "+y
noremap <Leader>P "+p

" change Escape key behaviour
" :imap ii <Esc>
imap <leader>q <Esc>
inoremap jj <Esc>

" Enable folding with the z
nnoremap <leader> z

" Buffer key mappings
nnoremap <leader>l :bn<cr>
nnoremap <leader>h :bp<cr>
nnoremap <leader>0 :bf<cr>
nnoremap <leader>9 :bl<cr>
nnoremap <leader>dd :bd<cr>

" Managing tabs
nnoremap tn :tabnew<Space>
nnoremap tk :tabnext<CR>
nnoremap tj :tabprev<CR>
nnoremap th :tabfirst<CR>
nnoremap tl :tablast<CR>
nnoremap tc :tabclose<CR>

" navigate split screens easily
nmap <silent> <c-k> :wincmd k<CR>
nmap <silent> <c-j> :wincmd j<CR>
nmap <silent> <c-h> :wincmd h<CR>
nmap <silent> <c-l> :wincmd l<CR>

" Stay in visual mode when indenting. You will never have to run gv after
" performing an indentation.
" Pressing Shift-< or Shift-> will let you indent/unident selected lines,
" allow it to occur multiple times in visual mode
vnoremap < <gv
vnoremap > >gv

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
    set wildignore+=.git\*,.hg\*,.svn\*
else
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store,*/node_modules/,*/vendor/
endif

" Make Y yank everything from the cursor to the end of the line. This makes Y
" act more like C or D because by default, Y yanks the current line (i.e. the
" same as yy).
noremap Y y$

" autocompletion of files and commands behaves like shell
" (complete only the common part, list the options that match)
set wildmode=list:longest

" Enable 256 colors palette in Gnome Terminal
if $COLORTERM == 'gnome-terminal'
    set t_Co=256
endif

try
    " Choose colorscheme
    " *********************************************
    if strftime('%H') >= 7 && strftime('%H') < 20
      colorscheme molokai
        let g:airline_theme = 'miramare'
    else
        colorscheme allomancer
        let g:airline_theme='cosmic_latte_dark'
    endif
catch
endtry

set background=dark

" better backup, swap and undos storage
set directory=~/.vim/dirs/tmp     " directory to place swap files in
set backup                        " make backup files
set backupdir=~/.vim/dirs/backups " where to put backup files
set undodir=~/.vim/dirs/undos
set viminfo+=n~/.vim/dirs/viminfo

" create needed directories if they don't exist
if !isdirectory(&backupdir)
    call mkdir(&backupdir, "p")
endif
if !isdirectory(&directory)
    call mkdir(&directory, "p")
endif
if !isdirectory(&undodir)
    call mkdir(&undodir, "p")
endif

" PLUGINS SETUP
" ********************************************************************************

" NERDTree -----------------------------
map <C-b> :NERDTreeToggle<CR>
let g:NERDTreeDirArrowExpandable = '▸'" Prettier
" open nerdtree with the current file selected
nmap <leader>t :NERDTreeFind<CR>
let g:NERDTreeDirArrowCollapsible = '▾'
let g:NERDTreeMouseMode = 3
let NERDTreeShowLineNumbers = 1
let NERDTreeShowHidden = 1
let NERDTreeMinimalUI = 1
let NERDTreeIgnore=['\.pyc$', '\~$', '^node_modules$', '^vendor$']         "ignore files in NERDTree

" Airline -----------------------------
let g:airline_powerline_fonts = 1
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'

" to use fancy symbols for airline
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" Airline unicode symbols
"let g:airline_left_sep = '»'
"let g:airline_right_sep = '«'
"let g:airline_left_alt_sep = ''
"let g:airline_right_alt_sep = ''

let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.whitespace = 'Ξ'

" CtrlP -----------------------------
" file finder mapping
let g:ctrlp_map = '<leader>ee'
" tags (symbols) in current file finder mapping
nmap <leader>g :CtrlPBufTag<CR>
" tags (symbols) in all files finder mapping
nmap <leader>G :CtrlPBufTagAll<CR>
" general code finder in all files mapping
nmap <leader>f :CtrlPLine<CR>
" recent files finder mapping
nmap <leader>m :CtrlPMRUFiles<CR>
" to be able to call CtrlP with default search text
function! CtrlPWithSearchText(search_text, ctrlp_command_end)
    execute ':CtrlP' . a:ctrlp_command_end
    call feedkeys(a:search_text)
endfunction
" same as previous mappings, but calling with current word as default text
nmap <leader>wg :call CtrlPWithSearchText(expand('<cword>'), 'BufTag')<CR>
nmap <leader>wG :call CtrlPWithSearchText(expand('<cword>'), 'BufTagAll')<CR>
nmap <leader>wf :call CtrlPWithSearchText(expand('<cword>'), 'Line')<CR>
nmap <leader>we :call CtrlPWithSearchText(expand('<cword>'), '')<CR>
nmap <leader>pe :call CtrlPWithSearchText(expand('<cfile>'), '')<CR>
nmap <leader>wm :call CtrlPWithSearchText(expand('<cword>'), 'MRUFiles')<CR>
" don't change working directory
let g:ctrlp_working_path_mode = 0
" ignore these files and folders on file finder
let g:ctrlp_custom_ignore = {
            \ 'dir':  '\v[\/](\.git|\.hg|\.svn|node_modules|vendor)$',
            \ 'file': '\.pyc$\|\.pyo$\|\.sh$\|\.so$',
            \ }

" vim emmet trigger key, prest ctrl + e + comma -----------------------------
let g:user_emmet_leader_key='<C-E>'

" vim-javascript --------------------------
" set conceallevel=1
map <leader>co :exec &conceallevel ? "set conceallevel=0" : "set conceallevel=1"<CR>
let g:javascript_conceal_function             = "ƒ"
let g:javascript_conceal_null                 = "ø"
let g:javascript_conceal_this                 = "@"
let g:javascript_conceal_return               = "⇚"
let g:javascript_conceal_undefined            = "¿"
let g:javascript_conceal_NaN                  = "ℕ"
let g:javascript_conceal_prototype            = "¶"
let g:javascript_conceal_static               = "•"
let g:javascript_conceal_super                = "Ω"
let g:javascript_conceal_arrow_function       = "⇒"
let g:javascript_conceal_noarg_arrow_function = "🞅"
let g:javascript_conceal_underscore_arrow_function = "🞅"

" ALE (eslint)  -------------------------
map <C-t> :ALEDetail<CR>
let g:ale_fix_on_save = 1
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '⚠'
let g:ale_open_list = 1
let g:ale_set_loclist = 0
let g:ale_lint_on_enter = 0
let g:ale_set_quickfix = 1
let g:ale_keep_list_window_open = 0
let g:ale_lint_delay = 960000                 " 16 minutes
let g:ale_lint_on_text_changed= "never"
let g:ale_list_window_size = 5                " Show 5 lines of errors (default: 10)
nmap <silent> <Leader>k <Plug>(ale_previous_wrap)
nmap <silent> <Leader>j <Plug>(ale_next_wrap)
let b:ale_linter_aliases = ['javascript', 'vue']
let g:ale_linters = {
  \  'javascript': ['eslint'],
  \  'vue': ['eslint'],
  \}
let g:ale_fixers = {
  \  'javascript': ['eslint'],
  \  'json': ['prettier'],
  \  'vue': ['prettier', 'eslint'],
  \  'markdown': ['prettier'],
  \  'yaml': ['prettier'],
  \  'css': ['prettier'],
  \}

let g:coc_node_path = '/home/bill/.nvm/versions/node/v12.16.1/bin/node'

" Supertab completion from top-bottom
"let g:SuperTabDefaultCompletionType = "<c-n>"

" vim-vue-plugin ----------------------
let g:vim_vue_plugin_highlight_vue_attr	= 1
let g:vim_vue_plugin_debug = 1

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
if has('patch8.1.1068')
  " Use `complete_info` if your (Neo)Vim version supports it.
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

"command! -nargs=0 Prettier :CocCommand prettier.formatFile

"let g:airline_theme = 'miramare'

"let g:indentLine_setColors = 1
"let g:indentLine_color_term = 10
"let g:indentLine_bgcolor_term = 202
"let g:indentLine_char = '|'
"let g:indentLine_concealcursor = 'inc'
"let g:indentLine_conceallevel = 2

nnoremap <C-x> :let curwd='\\\<<C-R>=expand("<cword>")<CR>\\\>'<CR> :let @/=curwd<CR>:call histadd("search", curwd)<CR>:set hls<CR>
