" BASIC SETUP:
" the <leader> is (comma)
" ***************************************************************************
" to be able to use VIM key combos not only in the shell but also in the Python interpreter
" and any other tool that uses GNU Readline, add the following line to ~/.inputrc
" set editing-mode vi
" ***************************************************************************
syntax enable                                                               " enable syntax highlighting and plugin (for netrw)

set autoread                                                                " Set to auto read when a file is changed from the outside
set backspace=indent,eol,start                                              " more powerful backspacing
set clipboard=unnamed                                                       " access your system clipboard
set conceallevel=0                                                          " See `` in markdown files
"set cmdheight=2                                                             " Height of the command bar
set encoding=utf8                                                           " Set utf8 as standard encoding and en_US as the standard language
set expandtab                                                               " convert tabs into spaces
set ffs=unix,dos,mac                                                        " Use Unix as the standard file type
set foldmethod=expr                                                         " Code folding
set foldexpr=nvim_treesitter#foldexpr()
set foldlevel=99
set hidden
set history=500                                                             " Sets how many lines of history VIM has to remember
set incsearch                                                               " incremental search
set laststatus=2                                                            " Always show the status line
set linespace=15
set list                                                                    " Show trailing white space
set listchars=tab:>·,trail:~,extends:>,precedes:<,space:.                   " eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:.
set mouse=nicr
set magic                                                                   " For regular expressions turn magic on
set nocompatible                                                            " enter the current millenium
set number                                                                  " always show line numbers
set ruler                                                                   " Always show current position
set scrolloff=3                                                             " when scrolling, keep cursor 3 lines away from screen border
set shiftwidth=2                                                            " amount of block indenting
set smarttab                                                                " uses the shiftwidth instead of tabstop to delete indented line
set synmaxcol=200                                                           " performance ???
set scrolloff=3                                                             " when scrolling, keep cursor 3 lines away from screen border
set tabstop=2                                                               " press tab, 2 spaces forward, 1 tab == 2 spaces
set timeoutlen=500                                                          " Default timeoutlen is 1000 ms
set updatetime=300                                                          " Faster completion
set wrap                                                                    " Wrap lines

" PLUGINS
" ************************************************************************
" set the runtime path to include VUndle and initialize
" Install vim-plug if we don't already have it
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source ~/.vimrc
endif

call plug#begin('~/.vim/plugged')

" Brief help
" :PlugInstall    - installs plugins; to update :PlugUpdate
" :PlugClean      - confirms removal of unused plugins;

Plug 'elzr/vim-json'
Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
Plug 'airblade/vim-gitgutter'

" Icon files
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'ryanoasis/vim-devicons'

" Tabline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Status line
Plug 'nvim-lualine/lualine.nvim'
Plug 'kyazdani42/nvim-web-devicons'

Plug 'neovim/nvim-lspconfig'

" Other usefull completion sources (Rust)
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-nvim-lsp'                                               " LSP completion source for nvim-cmp
Plug 'hrsh7th/nvim-cmp'                                                   " Completion framework
Plug 'hrsh7th/vim-vsnip'                                                  " Snippet completion source for nvim-cmp
Plug 'simrat39/rust-tools.nvim'                                           " To enable more of the features of rust-analyzer, such as inlay hints and more!
Plug 'nvim-lua/popup.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'j-hui/fidget.nvim'                                                  " nvim-lsp progress

Plug 'scrooloose/nerdtree'                                                " Better file browser
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" theme plugins
Plug 'NLKNguyen/papercolor-theme'
Plug 'Nequo/vim-allomancer'
Plug 'tomasr/molokai'

" All of your Plugins must be added before the following line
filetype plugin indent on                                               " required
call plug#end()                                                         " required

" OTHER BASIC SETUP (TWEAKS)
" ***************************************************************************
let mapleader = ","
let maplocalleader = ","
set termguicolors
nnoremap <leader>N :setlocal number!<cr>            " Toggle line numbers

" 1 comma+s to save
" 2 comma+q to quit (does not save, watch out!)
" 3 quit all without saving
nnoremap <leader>ss :w<cr>
nnoremap <leader>q :q!<cr>
nnoremap <leader>qa :qa!<cr>

" Remove search results
command! H let @/=""

let $MYVIMRC="~/.nvimrc-rust"
" Reload vimrc
nnoremap <leader>rv :source<Space>$MYVIMRC<cr>
" Edit vimrc
nnoremap <leader>ev :e $MYVIMRC<cr>

" Copy & paste to clipboard
noremap <Leader>Y "+y
noremap <Leader>P "+p

" change Escape key behaviour
" :imap ii <Esc>
imap <leader>q <Esc>
inoremap jj <Esc>

" Enable folding with the z
nnoremap <leader> z

" Buffer key mappings
nnoremap <leader>l :bn<cr>
nnoremap <leader>h :bp<cr>
nnoremap <leader>0 :bf<cr>
nnoremap <leader>9 :bl<cr>
nnoremap <leader>dd :bd<cr>

" Managing tabs
nnoremap tn :tabnew<Space>
nnoremap tk :tabnext<CR>
nnoremap tj :tabprev<CR>
nnoremap th :tabfirst<CR>
nnoremap tl :tablast<CR>
nnoremap tc :tabclose<CR>

" Open splits
nmap vs :vsplit<cr>
nmap sp :split<cr>

" navigate split screens easily
nmap <silent> <c-k> :wincmd k<CR>
nmap <silent> <c-j> :wincmd j<CR>
nmap <silent> <c-h> :wincmd h<CR>
nmap <silent> <c-l> :wincmd l<CR>

" Stay in visual mode when indenting. You will never have to run gv after
" performing an indentation.
" Pressing Shift-< or Shift-> will let you indent/unident selected lines,
" allow it to occur multiple times in visual mode
vnoremap < <gv
vnoremap > >gv

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
    set wildignore+=.git\*,.hg\*,.svn\*
else
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store/*,*/target/*
endif

" Make Y yank everything from the cursor to the end of the line. This makes Y
" act more like C or D because by default, Y yanks the current line (i.e. the
" same as yy).
noremap Y y$

" autocompletion of files and commands behaves like shell
" (complete only the common part, list the options that match)
set wildmode=list:longest

try
    " Choose colorscheme
    " *********************************************
    if strftime('%H') >= 7 && strftime('%H') < 20
        colorscheme PaperColor
    else
        colorscheme allomancer
    endif
catch
endtry

set background=dark

" PLUGINS SETUP
" ********************************************************************************

" Airline -----------------------------
let g:airline_theme = 'distinguished'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'

" NERDTree -----------------------------
map <C-b> :NERDTreeToggle<CR>
let g:NERDTreeDirArrowExpandable = '▸'" Prettier
" open nerdtree with the current file selected
nmap <leader>t :NERDTreeFind<CR>
let g:NERDTreeDirArrowCollapsible = '▾'
let g:NERDTreeMouseMode = 3
let NERDTreeShowLineNumbers = 1
let NERDTreeShowHidden = 1
let NERDTreeMinimalUI = 1
let NERDTreeIgnore=['\~$', '^target$', '\.vscode$']         "ignore files in NERDTree

" fzf -------------------------------------
nnoremap <silent> <C-f> :Files<CR>
nnoremap <silent> <Leader>f :Rg<CR>
" requires silversearcher-ag
" used to ignore gitignore files
let $FZF_DEFAULT_COMMAND = 'ag -g ""'

" lsp-config -----------------------------
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

set completeopt=menuone,noinsert,noselect
let g:completion_matching_strategy_list = ['exact', 'substring', 'fuzzy']
" Avoid showing extra messages when using completion
set shortmess+=c

" Lua Configs ===========================================================
lua <<EOF
require'nvim-treesitter.configs'.setup {
  highlight = {
      enable = true
  },
  indent = {
    enable = true
  }
}

local function on_attach(client, buffer)
  -- This callback is called when the LSP is atttached/enabled for this buffer
  -- we could set keymaps related to LSP, etc here.
  local keymap_opts = { buffer = buffer }
  -- Code navigation and shortcuts
  vim.keymap.set("n", "<c-]>", vim.lsp.buf.definition, keymap_opts)
  vim.keymap.set("n", "K", vim.lsp.buf.hover, keymap_opts)
  vim.keymap.set("n", "gD", vim.lsp.buf.implementation, keymap_opts)
  vim.keymap.set("n", "<c-k>", vim.lsp.buf.signature_help, keymap_opts)
  vim.keymap.set("n", "1gD", vim.lsp.buf.type_definition, keymap_opts)
  vim.keymap.set("n", "gr", vim.lsp.buf.references, keymap_opts)
  vim.keymap.set("n", "g0", vim.lsp.buf.document_symbol, keymap_opts)
  vim.keymap.set("n", "gW", vim.lsp.buf.workspace_symbol, keymap_opts)
  vim.keymap.set("n", "gd", vim.lsp.buf.definition, keymap_opts)
  vim.keymap.set("n", "ga", vim.lsp.buf.code_action, keymap_opts)
  -- Goto previous/next diagnostic warning/error
  vim.keymap.set("n", "g[", vim.diagnostic.goto_prev, keymap_opts)
  vim.keymap.set("n", "g]", vim.diagnostic.goto_next, keymap_opts)
  -- nnoremap <silent> g[ <cmd>lua vim.diagnostic.goto_prev()<CR>
  -- nnoremap <silent> g] <cmd>lua vim.diagnostic.goto_next()<CR>
end

-- Show diagnostic popup on cursor hover
local diag_float_grp = vim.api.nvim_create_augroup("DiagnosticFloat", { clear = true })
vim.api.nvim_create_autocmd("CursorHold", {
  callback = function()
   vim.diagnostic.open_float(nil, { focusable = false })
  end,
  group = diag_float_grp,
})


local format_sync_grp = vim.api.nvim_create_augroup("Format", {})
vim.api.nvim_create_autocmd("BufWritePre", {
  pattern = "*.rs",
  callback = function()
    vim.lsp.buf.format({ timeout_ms = 200 })
  end,
  group = format_sync_grp,
})

-- have a fixed column for the diagnostics to appear in
-- this removes the jitter when warnings/errors flow in
vim.wo.signcolumn = "yes"

local nvim_lsp = require'lspconfig'

local opts = {
    tools = { 
        -- rust-tools options
        --on_initialized = nil,
        runnables = {
          use_telescope = true,
        },
        inlay_hints = {
            auto = true,
            show_parameter_hints = false,
            parameter_hints_prefix = "",
            other_hints_prefix = "",
        },
        -- reload_workspace_from_cargo_toml = true,
    },

    -- all the opts to send to nvim-lspconfig
    -- these override the defaults set by rust-tools.nvim
    -- see https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md#rust_analyzer
    server = {
        -- on_attach is a callback called when the language server attachs to the buffer
        on_attach = on_attach,
        settings = {
            -- to enable rust-analyzer settings visit:
            -- https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/generated_config.adoc
            ["rust-analyzer"] = {
                -- enable clippy on save
                checkOnSave = {
                    command = "clippy"
                },
            }
        }
    },
}

require('rust-tools').setup(opts)

-- Setup Completion
-- See https://github.com/hrsh7th/nvim-cmp#basic-configuration
local cmp = require'cmp'
cmp.setup({
  -- Enable LSP snippets
  preselect = cmp.PreselectMode.None,
  snippet = {
    expand = function(args)
        vim.fn["vsnip#anonymous"](args.body)
    end,
  },
  mapping = {
    ['<C-p>'] = cmp.mapping.select_prev_item(),
    ['<C-n>'] = cmp.mapping.select_next_item(),
    -- Add tab support
    ['<S-Tab>'] = cmp.mapping.select_prev_item(),
    ['<Tab>'] = cmp.mapping.select_next_item(),
    ['<C-d>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4), ['<C-Space>'] = cmp.mapping.complete(),
    ['<C-e>'] = cmp.mapping.close(),
    ['<CR>'] = cmp.mapping.confirm({
      behavior = cmp.ConfirmBehavior.Insert,
      select = true,
    })
  },

  -- Installed sources
  sources = {
    { name = 'nvim_lsp' },
    { name = 'vsnip' },
    { name = 'path' },
    { name = 'buffer' },
  },
})

require'lualine'.setup {
    options = { theme = 'papercolor_dark' },
}
require"fidget".setup{}
EOF

highlight FidgetTitle ctermfg=110 guifg=#5f8787
" End Lua Configs ===========================================================
