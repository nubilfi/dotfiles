" BASIC SETUP:
" the <leader> is (comma)
" ***************************************************************************
" to be able to use VIM key combos not only in the shell but also in the Python interpreter
" and any other tool that uses GNU Readline, add the following line to ~/.inputrc
" set editing-mode vi
" ***************************************************************************

syntax enable                                                               " enable syntax highlighting and plugin (for netrw)

set autoread                                                                " Set to auto read when a file is changed from the outside
set backspace=indent,eol,start                                              " more powerful backspacing
set clipboard=unnamed                                                       " access your system clipboard
set conceallevel=0                                                          " See `` in markdown files
set cmdheight=2                                                             " Height of the command bar
set backspace=indent,eol,start                                              " more powerful backspacing
set encoding=utf8                                                           " Set utf8 as standard encoding and en_US as the standard language
set expandtab                                                               " convert tabs into spaces
set ffs=unix,dos,mac                                                        " Use Unix as the standard file type
set foldmethod=indent                                                       " Code folding
set foldlevel=99
set hidden
set history=500                                                             " Sets how many lines of history VIM has to remember
set incsearch                                                               " incremental search
set laststatus=2                                                            " Always show the status line
set linespace=15
set list                                                                    " Show trailing white space
set listchars=tab:>·,trail:~,extends:>,precedes:<,space:.                   " eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:.
set mouse=nicr
set magic                                                                   " For regular expressions turn magic on
set nocompatible                                                            " enter the current millenium
set nobackup                                                                " coc recommendation
set nowritebackup                                                           " coc recommendation
set number                                                                  " always show line numbers
set ruler                                                                   " Always show current position
set scrolloff=3                                                             " when scrolling, keep cursor 3 lines away from screen border
set shiftwidth=2                                                            " amount of block indenting
set smarttab                                                                " uses the shiftwidth instead of tabstop to delete indented line
set synmaxcol=200                                                           " performance ???
set scrolloff=3                                                             " when scrolling, keep cursor 3 lines away from screen border
set tabstop=2                                                               " press tab, 2 spaces forward, 1 tab == 2 spaces
set timeoutlen=500                                                          " Default timeoutlen is 1000 ms
set updatetime=300                                                          " Faster completion
set wrap                                                                    " Wrap lines


" PLUGINS
" ************************************************************************
" Install vim-plug if we don't already have it
if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
  silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source ~/.vimrc
endif

call plug#begin('~/.vim/plugged')

" Brief help
" :PlugInstall    - installs plugins; to update :PlugUpdate
" :PlugClean      - confirms removal of unused plugins;

Plug 'elzr/vim-json'
Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
Plug 'airblade/vim-gitgutter'

Plug 'neoclide/coc.nvim', {'branch': 'release'}                           " Intellisense engine
Plug 'scrooloose/nerdtree'                                                " Better file browser
Plug 'scrooloose/nerdcommenter'                                           " Code commenter
Plug 't9md/vim-choosewin'                                                 " Land on window like tmux's 'display-pane'
Plug 'scrooloose/syntastic'                                               " Languages code checker
Plug 'ap/vim-css-color'                                                   " Paint css colors with the real color
Plug 'pangloss/vim-javascript'                                            " Javascript indentation and syntax support
Plug 'MaxMEllon/vim-jsx-pretty'                                           " JSX syntax pretty highlighting
Plug 'styled-components/vim-styled-components', { 'branch': 'main' }      " styled components

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Icon files
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'ryanoasis/vim-devicons'
" Airline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" theme plugins
Plug 'nightsense/cosmic_latte'
Plug 'Nequo/vim-allomancer'
Plug 'franbach/miramare'
Plug 'tomasr/molokai'

" All of your Plugins must be added before the following line
call plug#end()                                                           " required
filetype plugin indent on                                                 " required

" OTHER BASIC SETUP (TWEAKS)
" ***************************************************************************
let mapleader = ","
let maplocalleader = ","
set termguicolors
nnoremap <leader>N :setlocal number!<cr>            " Toggle line numbers

" 1 comma+s to save
" 2 comma+q to quit (does not save, watch out!)
" 3 quit all without saving
nnoremap <leader>ss :w<cr>
nnoremap <leader>q :q!<cr>
nnoremap <leader>qa :qa!<cr>

autocmd cursorhold * set nohlsearch
autocmd cursormoved * set hlsearch

" Remove search results
command! H let @/=""

let $MYVIMRC="/home/habil/.vimrc-react"
" Reload vimrc
nnoremap <leader>rv :source<Space>$MYVIMRC<cr>
" Edit vimrc
nnoremap <leader>ev :e $MYVIMRC<cr>

" Copy & paste to clipboard
noremap <Leader>Y "+y
noremap <Leader>P "+p

" change Escape key behaviour
" :imap ii <Esc>
imap <leader>q <Esc>
inoremap jj <Esc>

" Enable folding with the z
nnoremap <leader> z

" Buffer key mappings
nnoremap <leader>l :bn<cr>
nnoremap <leader>h :bp<cr>
nnoremap <leader>0 :bf<cr>
nnoremap <leader>9 :bl<cr>
nnoremap <leader>dd :bd<cr>

" Managing tabs
nnoremap tn :tabnew<Space>
nnoremap tk :tabnext<CR>
nnoremap tj :tabprev<CR>
nnoremap th :tabfirst<CR>
nnoremap tl :tablast<CR>
nnoremap tc :tabclose<CR>

" Open splits
nmap vs :vsplit<cr>
nmap sp :split<cr>

" navigate split screens easily
nmap <silent> <c-k> :wincmd k<CR>
nmap <silent> <c-j> :wincmd j<CR>
nmap <silent> <c-h> :wincmd h<CR>
nmap <silent> <c-l> :wincmd l<CR>

" Stay in visual mode when indenting. You will never have to run gv after
" performing an indentation.
" Pressing Shift-< or Shift-> will let you indent/unident selected lines,
" allow it to occur multiple times in visual mode
vnoremap < <gv
vnoremap > >gv

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
    set wildignore+=.git\*,.hg\*,.svn\*
else
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store,*/node_modules/
endif

" Make Y yank everything from the cursor to the end of the line. This makes Y
" act more like C or D because by default, Y yanks the current line (i.e. the
" same as yy).
noremap Y y$

" autocompletion of files and commands behaves like shell
" (complete only the common part, list the options that match)
set wildmode=list:longest

try
    " Choose colorscheme
    " *********************************************
    if strftime('%H') >= 7 && strftime('%H') < 20
        colorscheme molokai
        let g:airline_theme = 'miramare'
    else
        colorscheme allomancer
        let g:airline_theme='cosmic_latte_dark'
    endif
catch
endtry

set background=dark

" PLUGINS SETUP
" ********************************************************************************

" NERDTree -----------------------------
map <C-b> :NERDTreeToggle<CR>
let g:NERDTreeDirArrowExpandable = '▸'" Prettier
" open nerdtree with the current file selected
nmap <leader>t :NERDTreeFind<CR>
let g:NERDTreeDirArrowCollapsible = '▾'
let g:NERDTreeMouseMode = 3
let NERDTreeShowLineNumbers = 1
let NERDTreeShowHidden = 1
let NERDTreeMinimalUI = 1
let NERDTreeIgnore=['\.pyc$', '\~$', '^node_modules$']         "ignore files in NERDTree

" Syntastic -----------------------------
" show list of errors and warnings on the current file
nmap <leader>e :Errors<CR>
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_enable_signs = 0
" custom icons (enable them if you use a patched font)
let g:syntastic_error_symbol = "✗"
let g:syntastic_warning_symbol = "⚠"
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_aggregate_errors = 1

" Airline -----------------------------
let g:airline_powerline_fonts = 1
let g:airline_theme = 'distinguished'
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'

" to use fancy symbols for airline
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" Airline unicode symbols
let g:airline_left_sep = '»'
let g:airline_right_sep = '«'
let g:airline_left_alt_sep = ''
let g:airline_right_alt_sep = ''

let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.whitespace = 'Ξ'

let g:coc_node_path = '/home/habil/.nvm/versions/node/v12.14.1/bin/node'

" vim jsx pretty -----------------------
let g:vim_jsx_pretty_colorful_config = 1

" coc.nvim -------------------------------
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
if has('patch8.1.1068')
  " Use `complete_info` if your (Neo)Vim version supports it.
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

let g:coc_global_extensions = ['coc-emmet', 'coc-css', 'coc-html', 'coc-json', 'coc-prettier', 'coc-tsserver']

" fix braces indentation
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" fzf -------------------------------------
nnoremap <silent> <C-f> :Files<CR>
nnoremap <silent> <Leader>f :Rg<CR>
" requires silversearcher-ag
" used to ignore gitignore files
let $FZF_DEFAULT_COMMAND = 'ag -g ""'
